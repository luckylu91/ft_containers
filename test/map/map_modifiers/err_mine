=================================================================
==10619==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000110 at pc 0x00010af93219 bp 0x7ffee4c72c30 sp 0x7ffee4c72c28
READ of size 4 at 0x602000000110 thread T0
    #0 0x10af93218 in std::__1::less<int>::operator()(int const&, int const&) const __functional_base:55
    #1 0x10af93154 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::value_compare::operator()(ft::pair<int const, int> const&, ft::pair<int const, int> const&) const map.hpp:300
    #2 0x10af921ba in ft::operator<(ft::pair<int const, int> const&, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node const&) map.hpp:735
    #3 0x10af912d9 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::insert(ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node*, ft::pair<int const, int> const&, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST&) map.hpp:421
    #4 0x10af90bf3 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::insert(ft::pair<int const, int> const&) map.hpp:775
    #5 0x10af8d09f in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::insert(ft::pair<int const, int> const&) map.hpp:108
    #6 0x10af8dc95 in void insert<int, int, std::__1::less<int> >(ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >&, int, int) test_map.h:42
    #7 0x10af8d789 in test_insert() map_modifiers.cpp:15
    #8 0x10af90772 in test() map_modifiers.cpp:91
    #9 0x10af9b793 in main main.cpp:9
    #10 0x7fff57f233d4 in start (libdyld.dylib:x86_64+0x163d4)

0x602000000110 is located 0 bytes inside of 8-byte region [0x602000000110,0x602000000118)
freed by thread T0 here:
    #0 0x10b027b02 in wrap__ZdlPv (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x6eb02)
    #1 0x10af93124 in std::__1::_DeallocateCaller::__do_call(void*) new:320
    #2 0x10af93108 in std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned long) new:278
    #3 0x10af930e0 in std::__1::_DeallocateCaller::__do_deallocate_handle_size_align(void*, unsigned long, unsigned long) new:248
    #4 0x10af930b4 in std::__1::__libcpp_deallocate(void*, unsigned long, unsigned long) new:326
    #5 0x10af93064 in std::__1::allocator<ft::pair<int const, int> >::deallocate(ft::pair<int const, int>*, unsigned long) memory:1817
    #6 0x10af9300f in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::~Node() map.hpp:339
    #7 0x10af92114 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::~Node() map.hpp:337
    #8 0x10af91250 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::insert(ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node*, ft::pair<int const, int> const&, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST&) map.hpp:417
    #9 0x10af90bf3 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::insert(ft::pair<int const, int> const&) map.hpp:775
    #10 0x10af8d09f in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::insert(ft::pair<int const, int> const&) map.hpp:108
    #11 0x10af8dc95 in void insert<int, int, std::__1::less<int> >(ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >&, int, int) test_map.h:42
    #12 0x10af8d789 in test_insert() map_modifiers.cpp:15
    #13 0x10af90772 in test() map_modifiers.cpp:91
    #14 0x10af9b793 in main main.cpp:9
    #15 0x7fff57f233d4 in start (libdyld.dylib:x86_64+0x163d4)

previously allocated by thread T0 here:
    #0 0x10b027502 in wrap__Znwm (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x6e502)
    #1 0x10af92978 in std::__1::__libcpp_allocate(unsigned long, unsigned long) new:239
    #2 0x10af92e97 in std::__1::allocator<ft::pair<int const, int> >::allocate(unsigned long, void const*) memory:1814
    #3 0x10af92d1d in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::Node(ft::pair<int const, int> const&, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST&) map.hpp:322
    #4 0x10af920f4 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::Node(ft::pair<int const, int> const&, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST&) map.hpp:321
    #5 0x10af91225 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node::insert(ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::Node*, ft::pair<int const, int> const&, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST&) map.hpp:417
    #6 0x10af90bf3 in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::BST::insert(ft::pair<int const, int> const&) map.hpp:775
    #7 0x10af8d09f in ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >::insert(ft::pair<int const, int> const&) map.hpp:108
    #8 0x10af8dc95 in void insert<int, int, std::__1::less<int> >(ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<int const, int> > >&, int, int) test_map.h:42
    #9 0x10af8d789 in test_insert() map_modifiers.cpp:15
    #10 0x10af90772 in test() map_modifiers.cpp:91
    #11 0x10af9b793 in main main.cpp:9
    #12 0x7fff57f233d4 in start (libdyld.dylib:x86_64+0x163d4)

SUMMARY: AddressSanitizer: heap-use-after-free __functional_base:55 in std::__1::less<int>::operator()(int const&, int const&) const
Shadow bytes around the buggy address:
  0x1c03ffffffd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c03ffffffe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c03fffffff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c0400000000: fa fa fd fd fa fa fd fd fa fa 00 00 fa fa 00 05
  0x1c0400000010: fa fa 00 00 fa fa 00 04 fa fa 00 00 fa fa 00 06
=>0x1c0400000020: fa fa[fd]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==10619==ABORTING
